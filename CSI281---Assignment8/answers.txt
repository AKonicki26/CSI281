1. Depth first search will find an answer faster, since it doesn't iterate through every neighbor of a node unless it has to, while breadth first will search through almost every node until it finds a match2. The worst case of Breadth-first search is O(|V| + |E|), where V is the number of verticies and E is the number of edges or connections. This is because at the worst possible case, breadth first search will go through every node in the graph, also checking every connection between them.3. An adjacency matrix would be less effective because it would require storing a boolean for every other user on the platform, having that list for every user, essentially storing user^2 booleans.4. A good real life example would be solving something a word search, where you can start by going through every letter, then if one matches the start of the word you're looking for, you check the neighbors, where with breadth first you'd be searching the neighboring letters on every letter